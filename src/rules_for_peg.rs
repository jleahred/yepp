
#![warn(missing_docs)]
//! Module to deal with rules (aka SetOfRules)
//!

use crate::parser;

pub(crate) fn rules() -> parser::expression::SetOfRules {
rules!(

         r#"symbol"# => RuleInfo{ expr:or!(and!(ematch!(chlist r#"_"#  , from 'a', to 'z' , from 'A', to 'Z' , from '0', to '9' ), rep!(ematch!(chlist r#"_'""#  , from 'a', to 'z' , from 'A', to 'Z' , from '0', to '9' ), 0))), descr:None }
       , r#"_1"# => RuleInfo{ expr:or!(and!(lit!(" ")), and!(transf2!( and!( and!(ref_rule!(r#"eol"#)) ) , t2rules!(t2_funct!("none"), ) ))), descr:None }
       , r#"lit_esc"# => RuleInfo{ expr:or!(and!(transf2!( and!( and!(or!(and!(ref_rule!(r#"_""#), named!("l", rep!(or!(and!(ref_rule!(r#"esc_char"#)), and!(ref_rule!(r#"hex_char"#)), and!(not!(ref_rule!(r#"_""#)), dot!())), 0)), ref_rule!(r#"_""#)))) ) , t2rules!(t2_byname!("l"), ) ))), descr:None }
       , r#"mline_comment"# => RuleInfo{ expr:or!(and!(lit!("/*"), rep!(or!(and!(not!(lit!("*/")), dot!())), 0), lit!("*/"))), descr:None }
       , r#"_eol"# => RuleInfo{ expr:or!(and!(rep!(or!(and!(lit!(" ")), and!(ref_rule!(r#"comment"#))), 0), ref_rule!(r#"eol"#))), descr:None }
       , r#"andchunk"# => RuleInfo{ expr:or!(and!(transf2!( and!( and!(ref_rule!(r#"name"#), named!("e", ref_rule!(r#"rep_or_unary"#))) ) , t2rules!(t2_text!("NAMED"), t2_funct!("endl"), t2_byname!("name"), t2_funct!("endl"), t2_byname!("e"), ) )), and!(ref_rule!(r#"rep_or_unary"#))), descr:None }
       , r#"name"# => RuleInfo{ expr:or!(and!(transf2!( and!( and!(ref_rule!(r#"symbol"#), lit!(":")) ) , t2rules!(t2_byname!("symbol"), ) ))), descr:None }
       , r#"and"# => RuleInfo{ expr:or!(and!(ref_rule!(r#"expected"#)), and!(ref_rule!(r#"andline_transf2"#)), and!(ref_rule!(r#"just_andline"#))), descr:None }
       , r#"_""# => RuleInfo{ expr:or!(and!(lit!("\""))), descr:None }
       , r#"literal"# => RuleInfo{ expr:or!(and!(ref_rule!(r#"lit_noesc"#)), and!(ref_rule!(r#"lit_esc"#))), descr:None }
       , r#"lit_noesc"# => RuleInfo{ expr:or!(and!(transf2!( and!( and!(ref_rule!(r#"_'"#), named!("l", rep!(or!(and!(not!(ref_rule!(r#"_'"#)), dot!())), 0)), ref_rule!(r#"_'"#)) ) , t2rules!(t2_byname!("l"), ) ))), descr:None }
       , r#"grammar"# => RuleInfo{ expr:or!(and!(rep!(ref_rule!(r#"rule"#), 1))), descr:None }
       , r#"tmpl_text"# => RuleInfo{ expr:or!(and!(transf2!( and!( and!(named!("t", or!(and!(rep!(or!(and!(not!(or!(and!(lit!("$(")), and!(ref_rule!(r#"eol"#)))), dot!())), 1))))) ) , t2rules!(t2_text!("TEXT"), t2_funct!("endl"), t2_byname!("t"), t2_funct!("endl"), ) ))), descr:None }
       , r#"andline_transf2"# => RuleInfo{ expr:or!(and!(transf2!( and!( and!(or!(and!(ref_rule!(r#"andline"#), ref_rule!(r#"transf2"#), named!("and", rep!(or!(and!(transf2!( and!( and!(ref_rule!(r#"_"#)) ) , t2rules!(t2_funct!("none"), ) ), or!(and!(ref_rule!(r#"no_rule_name"#), not!(ref_rule!(r#"rule_descr"#)))), ref_rule!(r#"and"#))), 0, 1))))) ) , t2rules!(t2_text!("TRANSF2"), t2_funct!("endl"), t2_byname!("transf2"), t2_text!("EOTRANSF2"), t2_funct!("endl"), t2_text!("AND"), t2_funct!("endl"), t2_byname!("andline"), t2_text!("CLOSE_MEXPR"), t2_funct!("endl"), t2_byname!("and"), ) ))), descr:None }
       , r#"mchars"# => RuleInfo{ expr:or!(and!(rep!(or!(and!(not!(lit!("]")), not!(or!(and!(dot!(), lit!("-")))), dot!())), 1))), descr:None }
       , r#"just_andline"# => RuleInfo{ expr:or!(and!(ref_rule!(r#"andline"#), rep!(or!(and!(transf2!( and!( and!(ref_rule!(r#"_eol"#), rep!(ref_rule!(r#"eol"#), 0), ref_rule!(r#"_"#)) ) , t2rules!(t2_funct!("none"), ) ), or!(and!(ref_rule!(r#"no_rule_name"#), not!(ref_rule!(r#"rule_descr"#)))), ref_rule!(r#"and"#))), 0, 1))), descr:None }
       , r#"main"# => RuleInfo{ expr:or!(and!(transf2!( and!( and!(ref_rule!(r#"grammar"#)) ) , t2rules!(t2_byname!("grammar"), t2_text!("EOP"), ) ))), descr:None }
       , r#"comment"# => RuleInfo{ expr:or!(and!(transf2!( and!( and!(or!(and!(ref_rule!(r#"line_comment"#)), and!(ref_rule!(r#"mline_comment"#)))) ) , t2rules!(t2_funct!("none"), ) ))), descr:None }
       , r#"esc_char"# => RuleInfo{ expr:or!(and!(lit!("\r")), and!(lit!("\n")), and!(lit!("\t")), and!(lit!("\\")), and!(lit!("\\\""))), descr:None }
       , r#"mbetween"# => RuleInfo{ expr:or!(and!(transf2!( and!( and!(named!("f", dot!()), lit!("-"), named!("s", dot!())) ) , t2rules!(t2_byname!("f"), t2_funct!("endl"), t2_byname!("s"), t2_funct!("endl"), ) ))), descr:None }
       , r#"expr"# => RuleInfo{ expr:or!(and!(transf2!( and!( and!(ref_rule!(r#"or"#)) ) , t2rules!(t2_text!("OR"), t2_funct!("endl"), t2_byname!("or"), t2_text!("CLOSE_MEXPR"), t2_funct!("endl"), ) ))), descr:None }
       , r#"transf_rule"# => RuleInfo{ expr:or!(and!(rep!(or!(and!(transf2!( and!( and!(rep!(lit!(" "), 1), peek!(ref_rule!(r#"eol"#))) ) , t2rules!(t2_funct!("none"), ) )), and!(ref_rule!(r#"tmpl_text"#)), and!(ref_rule!(r#"tmpl_rule"#))), 1))), descr:None }
       , r#"rep_or_unary"# => RuleInfo{ expr:or!(and!(transf2!( and!( and!(ref_rule!(r#"atom_or_par"#), rep!(ref_rule!(r#"rep_symbol"#), 0, 1)) ) , t2rules!(t2_byname_opt!("rep_symbol"), t2_byname!("atom_or_par"), ) )), and!(transf2!( and!( and!(lit!("!"), ref_rule!(r#"atom_or_par"#)) ) , t2rules!(t2_text!("NEGATE"), t2_funct!("endl"), t2_byname!("atom_or_par"), ) )), and!(transf2!( and!( and!(lit!("&"), ref_rule!(r#"atom_or_par"#)) ) , t2rules!(t2_text!("PEEK"), t2_funct!("endl"), t2_byname!("atom_or_par"), ) ))), descr:None }
       , r#"parenth"# => RuleInfo{ expr:or!(and!(transf2!( and!( and!(lit!("("), ref_rule!(r#"_"#), ref_rule!(r#"expr"#), ref_rule!(r#"_"#)) ) , t2rules!(t2_byname!("expr"), ) ), or!(and!(transf2!( and!( and!(lit!(")")) ) , t2rules!(t2_funct!("none"), ) )), and!(expected!("unbalanced parethesis: missing ')'"))))), descr:None }
       , r#"tmpl_rule"# => RuleInfo{ expr:or!(and!(transf2!( and!( and!(lit!("$(")) ) , t2rules!(t2_funct!("none"), ) ), or!(and!(transf2!( and!( and!(lit!("?"), ref_rule!(r#"symbol"#)) ) , t2rules!(t2_text!("NAMED_OPT"), t2_funct!("endl"), t2_byname!("symbol"), t2_funct!("endl"), ) )), and!(transf2!( and!( and!(ref_rule!(r#"symbol"#)) ) , t2rules!(t2_text!("NAMED"), t2_funct!("endl"), t2_byname!("symbol"), t2_funct!("endl"), ) )), and!(transf2!( and!( and!(lit!("."), named!("pos", or!(and!(rep!(ematch!(chlist r#""#  , from '0', to '9' ), 1))))) ) , t2rules!(t2_text!("POS"), t2_funct!("endl"), t2_byname!("pos"), t2_funct!("endl"), ) )), and!(transf2!( and!( and!(lit!(":")) ) , t2rules!(t2_funct!("none"), ) ), transf2!( and!( and!(named!("fn", or!(and!(rep!(or!(and!(not!(or!(and!(lit!(")")), and!(ref_rule!(r#"eol"#)))), dot!())), 1))))) ) , t2rules!(t2_text!("FUNCT"), t2_funct!("endl"), t2_byname!("fn"), t2_funct!("endl"), ) ))), transf2!( and!( and!(lit!(")")) ) , t2rules!(t2_funct!("none"), ) ))), descr:None }
       , r#"eol"# => RuleInfo{ expr:or!(and!(lit!("\r\n")), and!(lit!("\n")), and!(lit!("\r"))), descr:None }
       , r#"atom_or_par"# => RuleInfo{ expr:or!(and!(ref_rule!(r#"atom"#)), and!(ref_rule!(r#"parenth"#))), descr:None }
       , r#"no_rule_name"# => RuleInfo{ expr:or!(and!(not!(or!(and!(ref_rule!(r#"rule_name"#), ref_rule!(r#"_"#), lit!("=")))))), descr:None }
       , r#"rep_symbol"# => RuleInfo{ expr:or!(and!(transf2!( and!( and!(lit!("*")) ) , t2rules!(t2_text!("REPEAT"), t2_funct!("endl"), t2_text!("0"), t2_funct!("endl"), t2_text!("inf"), t2_funct!("endl"), ) )), and!(transf2!( and!( and!(lit!("+")) ) , t2rules!(t2_text!("REPEAT"), t2_funct!("endl"), t2_text!("1"), t2_funct!("endl"), t2_text!("inf"), t2_funct!("endl"), ) )), and!(transf2!( and!( and!(lit!("?")) ) , t2rules!(t2_text!("REPEAT"), t2_funct!("endl"), t2_text!("0"), t2_funct!("endl"), t2_text!("1"), t2_funct!("endl"), ) ))), descr:None }
       , r#"rule_name"# => RuleInfo{ expr:or!(and!(ref_rule!(r#"symbol"#))), descr:None }
       , r#"dot"# => RuleInfo{ expr:or!(and!(lit!("."))), descr:None }
       , r#"atom"# => RuleInfo{ expr:or!(and!(transf2!( and!( and!(named!("a", ref_rule!(r#"literal"#))) ) , t2rules!(t2_text!("ATOM"), t2_funct!("endl"), t2_text!("LIT"), t2_funct!("endl"), t2_byname!("a"), t2_funct!("endl"), ) )), and!(transf2!( and!( and!(named!("a", ref_rule!(r#"match"#))) ) , t2rules!(t2_text!("MATCH"), t2_funct!("endl"), t2_byname!("a"), ) )), and!(transf2!( and!( and!(named!("a", ref_rule!(r#"rule_name"#))) ) , t2rules!(t2_text!("ATOM"), t2_funct!("endl"), t2_text!("RULREF"), t2_funct!("endl"), t2_byname!("a"), t2_funct!("endl"), ) )), and!(transf2!( and!( and!(ref_rule!(r#"dot"#)) ) , t2rules!(t2_text!("ATOM"), t2_funct!("endl"), t2_text!("DOT"), t2_funct!("endl"), ) ))), descr:None }
       , r#"andline"# => RuleInfo{ expr:or!(and!(ref_rule!(r#"andchunk"#), rep!(or!(and!(transf2!( and!( and!(rep!(lit!(" "), 1)) ) , t2rules!(t2_funct!("none"), ) ), or!(and!(ref_rule!(r#"expected"#)), and!(ref_rule!(r#"andchunk"#))))), 0))), descr:None }
       , r#"transf2"# => RuleInfo{ expr:or!(and!(transf2!( and!( and!(ref_rule!(r#"_1"#), ref_rule!(r#"_"#), lit!("->"), rep!(lit!(" "), 0)) ) , t2rules!(t2_funct!("none"), ) ), transf2!( and!( and!(ref_rule!(r#"transf_rule"#)) ) , t2rules!(t2_byname!("transf_rule"), ) ), peek!(ref_rule!(r#"eol"#)))), descr:None }
       , r#"match"# => RuleInfo{ expr:or!(and!(transf2!( and!( and!(lit!("[")) ) , t2rules!(t2_funct!("none"), ) ), or!(and!(transf2!( and!( and!(ref_rule!(r#"mchars"#), named!("b", or!(and!(rep!(ref_rule!(r#"mbetween"#), 0))))) ) , t2rules!(t2_text!("CHARS"), t2_funct!("endl"), t2_byname!("mchars"), t2_funct!("endl"), t2_text!("BETW"), t2_funct!("endl"), t2_byname!("b"), t2_text!("EOBETW"), t2_funct!("endl"), ) )), and!(transf2!( and!( and!(named!("b", or!(and!(rep!(ref_rule!(r#"mbetween"#), 1))))) ) , t2rules!(t2_text!("BETW"), t2_funct!("endl"), t2_byname!("b"), t2_text!("EOBETW"), t2_funct!("endl"), ) ))), transf2!( and!( and!(lit!("]")) ) , t2rules!(t2_funct!("none"), ) ))), descr:None }
       , r#"line_comment"# => RuleInfo{ expr:or!(and!(lit!("//"), rep!(or!(and!(not!(ref_rule!(r#"eol"#)), dot!())), 0))), descr:None }
       , r#"or"# => RuleInfo{ expr:or!(and!(transf2!( and!( and!(ref_rule!(r#"_"#), ref_rule!(r#"and"#)) ) , t2rules!(t2_text!("AND"), t2_funct!("endl"), t2_byname!("and"), t2_text!("CLOSE_MEXPR"), t2_funct!("endl"), ) ), transf2!( and!( and!(rep!(or!(and!(ref_rule!(r#"_"#), lit!("/"), ref_rule!(r#"_"#), ref_rule!(r#"or"#))), 0, 1)) ) , t2rules!(t2_byname!("or"), ) ))), descr:None }
       , r#"_"# => RuleInfo{ expr:or!(and!(transf2!( and!( and!(or!(and!(rep!(or!(and!(lit!(" ")), and!(ref_rule!(r#"eol"#)), and!(ref_rule!(r#"comment"#))), 0)))) ) , t2rules!(t2_funct!("none"), ) ))), descr:None }
       , r#"hex_char"# => RuleInfo{ expr:or!(and!(lit!("\0x"), ematch!(chlist r#""#  , from '0', to '9' , from 'A', to 'F' ), ematch!(chlist r#""#  , from '0', to '9' , from 'A', to 'F' ))), descr:None }
       , r#"rule"# => RuleInfo{ expr:or!(and!(transf2!( and!( and!(ref_rule!(r#"_"#), ref_rule!(r#"rule_name"#), ref_rule!(r#"_"#), lit!("="), ref_rule!(r#"_"#), ref_rule!(r#"expr"#), ref_rule!(r#"_eol"#), ref_rule!(r#"_"#), named!("desc", rep!(ref_rule!(r#"rule_descr"#), 0, 1))) ) , t2rules!(t2_text!("RULE"), t2_funct!("endl"), t2_byname!("rule_name"), t2_funct!("endl"), t2_text!("DESCR"), t2_funct!("endl"), t2_byname!("desc"), t2_funct!("endl"), t2_byname!("expr"), ) ))), descr:None }
       , r#"_'"# => RuleInfo{ expr:or!(and!(lit!("'"))), descr:None }
       , r#"expected"# => RuleInfo{ expr:or!(and!(transf2!( and!( and!(lit!("expected"), ref_rule!(r#"_"#), lit!("("), ref_rule!(r#"_"#), ref_rule!(r#"literal"#), ref_rule!(r#"_"#), lit!(")")) ) , t2rules!(t2_text!("EXPECTED"), t2_funct!("endl"), t2_byname!("literal"), t2_funct!("endl"), ) ))), descr:None }
       , r#"rule_descr"# => RuleInfo{ expr:or!(and!(transf2!( and!( and!(ref_rule!(r#"_"#), lit!(".desc"), named!("desc", rep!(or!(and!(not!(lit!("desc.")), dot!())), 0)), lit!("desc."), ref_rule!(r#"_"#)) ) , t2rules!(t2_byname!("desc"), ) ))), descr:None }
)
}
